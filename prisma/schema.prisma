generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  firstname    String?
  lastname     String?
  createdAt    DateTime      @default(now())
  organizations Organization[]
  event        Event[]
  invitations  Invitation[]
  organizationCount Int      @default(0)
}

model Organization {
  id           Int      @id @default(autoincrement())
  name         String
  bio          String?
  profileImage String?
  memberCount  Int
  size         OrgSize
  mission      String
  createdAt    DateTime @default(now())
  ownerId      Int
  events       Event[]
  owner        User     @relation(fields: [ownerId], references: [id])
}

model Event {
  id                    Int                    @id @default(autoincrement())
  publicId              String                 @unique @default(cuid())
  eventCode             String                 @unique
  ownerId               Int
  owner                 User                   @relation(fields: [ownerId], references: [id])
  title                 String
  description           String?
  startDate             DateTime?
  endDate               DateTime?
  location              String
  imageUrl              String?
  capacity              Int
  status                EventStatus            @default(PUBLIE)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  orgId                 Int
  budget                Float?
  category              EventCategory          @default(REUNION)
  isPublic              Boolean                @default(true)
  isCancelled           Boolean                @default(false)
  organization          Organization           @relation(fields: [orgId], references: [id])
  preparationPercentage Int                    @default(0)
  preparationTodos      PreparationTodo[]
  preparationTodoGroups PreparationTodoGroup[]
  invitations           Invitation[]
}

model Invitation {
  id        Int              @id @default(autoincrement())
  eventId   Int
  userId    Int
  email     String
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  event     Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([eventId, email])
}

model PreparationTodoGroup {
  id        Int      @id @default(autoincrement())
  name      String
  color     String   @default("#3b82f6")
  order     Int      @default(0)
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  todos     PreparationTodo[]
  createdAt DateTime @default(now())
}

model PreparationTodo {
  id        Int      @id @default(autoincrement())
  title     String
  done      Boolean  @default(false)
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  order     Int      @default(0)
  group     PreparationTodoGroup? @relation(fields: [groupId], references: [id])
  groupId   Int?
  createdAt DateTime @default(now())
}

model EventByCode {
  id        Int      @id @default(autoincrement())
  eventCode String   @unique
  publicId  String
  ownerId   Int
  title     String
  createdAt DateTime @default(now())
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum OrgSize {
  PETITE
  MOYENNE
  GRANDE
}

enum EventStatus {
  BROUILLON
  PUBLIE
  TERMINE
  ANNULE
}

enum EventCategory {
  REUNION
  SEMINAIRE
  CONFERENCE
  FORMATION
  ATELIER
  NETWORKING
  CEREMONIE
  EXPOSITION
  CONCERT
  SPECTACLE
  AUTRE
}
