generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid               String         @id @default(cuid())
  email             String         @unique
  password          String
  firstname         String?
  lastname          String?
  profileImage      String?        
  googleId          String?        @unique
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  organizations     Organization[]
  event             Event[]
  organizationCount Int            @default(0)
  userByRole        UserByRole?
  organizationInvites OrganizationInvite[] @relation("InvitedBy")
  organizationMembers OrganizationMember[]
}

model Organization {
  id           Int             @id @default(autoincrement())
  publicId     String?         @unique @default(cuid())
  name         String
  bio          String?
  organizationType         OrganizationType
  location               Json?
  mission                String
  memberCount            Int
  eventCount             Int                    @default(0)
  profileImage String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  ownerUid     String
  owner        User            @relation(fields: [ownerUid], references: [uid], onDelete: Cascade)
  events       Event[]
  members      Json?           @default("[]") 
  organizationInvites OrganizationInvite[]
  organizationMembers OrganizationMember[]
  organizationPermissions OrganizationPermissions?
}

model Event {
  id                    Int                    @id @default(autoincrement())
  publicId              String                 @unique @default(cuid())
  eventCode             String                 @unique
  ownerUid              String
  owner                 User                   @relation(fields: [ownerUid], references: [uid], onDelete: Cascade)
  title                 String
  description           String?
  startDate             DateTime?
  endDate               DateTime?
  location              String
  locationCoords        Json?
  imageUrl              String?
  capacity              Int
  status                EventStatus            @default(A_VENIR)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  orgId                 Int
  budget                Float?
  category              EventCategory          @default(REUNION)
  isPublic              Boolean                @default(true)
  isCancelled           Boolean                @default(false)
  organization          Organization           @relation(fields: [orgId], references: [id], onDelete: Cascade)
  preparationPercentage Int                    @default(0)
  preparationTodos      PreparationTodo[]
  preparationTodoGroups PreparationTodoGroup[]
  invitations           Invitation[]
  eventByCode           EventByCode?           @relation(fields: [eventCode], references: [eventCode], onDelete: Cascade)
}

model Invitation {
  id          Int              @id @default(autoincrement())
  invitationId String?         @unique @default(cuid())
  eventCode   String
  receiverName String
  receiverEmail String
  status      InvitationStatus @default(PENDING)
  sentAt      DateTime         @default(now())
  respondedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  event       Event            @relation(fields: [eventCode], references: [eventCode], onDelete: Cascade)

  @@unique([eventCode, receiverEmail])
}

model PreparationTodoGroup {
  id        Int               @id @default(autoincrement())
  name      String
  color     String            @default("#3b82f6")
  order     Int               @default(0)
  event     Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   Int
  todos     PreparationTodo[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model PreparationTodo {
  id          Int                   @id @default(autoincrement())
  title       String
  description String?
  done        Boolean               @default(false)
  event       Event                 @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     Int
  order       Int                   @default(0)
  group       PreparationTodoGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     Int?
  assignedTo  String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model EventByCode {
  id        Int      @id @default(autoincrement())
  eventCode String   @unique
  publicId  String
  ownerUid  String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event?
}

model UserByRole {
  userUid       String  @id
  userFirstName String?
  userRole      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User    @relation(fields: [userUid], references: [uid], onDelete: Cascade)
}

model OrganizationInvite {
  id             Int      @id @default(autoincrement())
  inviteCode     String   @unique @default(cuid()) 
  email          String
  receiverName   String
  status         OrgInviteStatus @default(PENDING) 
  invitedByUid   String
  organizationId Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy      User         @relation("InvitedBy", fields: [invitedByUid], references: [uid], onDelete: Cascade)

  @@unique([organizationId, email])
}

model OrganizationMember {
  id             Int      @id @default(autoincrement())
  userUid        String
  organizationId Int
  role           OrganizationRole @default(MEMBER)
  createdAt      DateTime @default(now())

  user          User          @relation(fields: [userUid], references: [uid], onDelete: Cascade)
  organization  Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userUid])
}

model OrganizationPermissions {
  id                              Int      @id @default(autoincrement())
  organizationId                  Int      @unique
  adminsCanModifyEvents           Boolean  @default(true)
  adminsCanDeleteEvents           Boolean  @default(true)
  adminsCanInviteEventParticipants Boolean @default(true)
  adminsCanInviteMembers          Boolean  @default(true)
  adminsCanModifyOrg              Boolean  @default(false)
  membersCanInviteEventParticipants Boolean @default(false)
  membersCanInviteMembers         Boolean  @default(false)
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt

  organization                    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum OrgInviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

enum OrganizationType {
  ASSOCIATION
  PME
  ENTREPRISE
  STARTUP
  AUTO_ENTREPRENEUR
}

enum EventStatus {
  A_VENIR
  EN_COURS
  TERMINE
  ANNULE
}

enum EventCategory {
  REUNION
  SEMINAIRE
  CONFERENCE
  FORMATION
  ATELIER
  NETWORKING
  CEREMONIE
  EXPOSITION
  CONCERT
  SPECTACLE
  AUTRE
}
