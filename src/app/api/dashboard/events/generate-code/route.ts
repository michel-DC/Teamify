import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getCurrentUser } from "@/lib/auth";

/**
 * G√©n√®re un code d'√©v√©nement unique de 8 caract√®res en majuscules
 */
function generateEventCode(): string {
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let result = "";
  for (let i = 0; i < 8; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

/**
 * V√©rifie si un code d'√©v√©nement existe d√©j√† dans la base de donn√©es
 */
async function isEventCodeUnique(code: string): Promise<boolean> {
  try {
    console.log(`üîç V√©rification de l'unicit√© du code: ${code}`);
    const existingEvent = await prisma.event.findUnique({
      where: { eventCode: code },
    });
    const isUnique = !existingEvent;
    console.log(`‚úÖ Code ${code} est ${isUnique ? "unique" : "d√©j√† utilis√©"}`);
    return isUnique;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la v√©rification du code ${code}:`, error);
    throw error;
  }
}

export async function GET() {
  console.log("üöÄ D√©but de la g√©n√©ration de code d'√©v√©nement");

  try {
    console.log("üîê V√©rification de l'authentification...");
    const user = await getCurrentUser();

    if (!user) {
      console.log("‚ùå Utilisateur non authentifi√©");
      return NextResponse.json({ error: "Non autoris√©" }, { status: 401 });
    }

    console.log(`‚úÖ Utilisateur authentifi√©: ${user.uid}`);

    let eventCode: string;
    let attempts = 0;
    const maxAttempts = 10;

    console.log("üîÑ D√©but de la g√©n√©ration de code unique...");

    // G√©n√®re un code unique avec un maximum de tentatives
    do {
      eventCode = generateEventCode();
      attempts++;

      console.log(
        `üìù Tentative ${attempts}/${maxAttempts}: G√©n√©ration du code ${eventCode}`
      );

      if (attempts > maxAttempts) {
        console.log("‚ùå Nombre maximum de tentatives atteint");
        return NextResponse.json(
          { error: "Impossible de g√©n√©rer un code unique" },
          { status: 500 }
        );
      }
    } while (!(await isEventCodeUnique(eventCode)));

    console.log(
      `üéâ Code g√©n√©r√© avec succ√®s: ${eventCode} (${attempts} tentatives)`
    );
    return NextResponse.json({ eventCode }, { status: 200 });
  } catch (error) {
    console.error(
      "üí• Erreur lors de la g√©n√©ration du code d'√©v√©nement:",
      error
    );
    console.error("üìã D√©tails de l'erreur:", {
      name: error instanceof Error ? error.name : "Unknown",
      message: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    });

    return NextResponse.json(
      {
        error: "Erreur serveur",
        details: error instanceof Error ? error.message : String(error),
      },
      { status: 500 }
    );
  }
}
