/**
 * Script de test pour la logique de calcul automatique du statut d'√©v√©nement
 *
 * Ce script teste les diff√©rentes logiques de calcul du statut bas√© sur les dates :
 * - Si la date de fin est pass√©e ‚Üí "TERMINE"
 * - Si la date de d√©but est pass√©e mais la date de fin est dans le futur ‚Üí "EN_COURS"
 * - Sinon ‚Üí "A_VENIR"
 *
 * La comparaison utilise UTC pour garantir la coh√©rence mondiale
 */

// Simulation des statuts d'√©v√©nement (copie de l'enum Prisma)
const EventStatus = {
  A_VENIR: "A_VENIR",
  EN_COURS: "EN_COURS",
  TERMINE: "TERMINE",
  ANNULE: "ANNULE",
};

/**
 * Calcule automatiquement le statut d'un √©v√©nement bas√© sur ses dates
 * Utilise UTC pour garantir la coh√©rence mondiale
 * @param {string|Date} startDate - Date de d√©but de l'√©v√©nement
 * @param {string|Date} endDate - Date de fin de l'√©v√©nement
 * @returns {string} Le statut calcul√© automatiquement
 */
function calculateEventStatus(startDate, endDate) {
  // Utilisation d'UTC pour garantir la coh√©rence mondiale
  // Conversion en timestamps UTC pour une comparaison pr√©cise
  const now = new Date();
  const nowUTC = now.getTime(); // getTime() retourne d√©j√† en millisecondes UTC

  const start = new Date(startDate);
  const end = new Date(endDate);

  // Conversion en timestamps UTC
  const startUTC = start.getTime();
  const endUTC = end.getTime();

  // Si la date de fin est pass√©e en UTC (incluant les minutes), l'√©v√©nement est termin√©
  if (endUTC < nowUTC) {
    return EventStatus.TERMINE;
  }

  // Si la date de d√©but est pass√©e mais la date de fin est dans le futur en UTC, l'√©v√©nement est en cours
  if (startUTC < nowUTC && endUTC > nowUTC) {
    return EventStatus.EN_COURS;
  }

  // Sinon, l'√©v√©nement est √† venir
  return EventStatus.A_VENIR;
}

/**
 * Tests des diff√©rents sc√©narios
 */
function runTests() {
  console.log(
    "üß™ Tests de la logique de calcul automatique du statut d'√©v√©nement (UTC)\n"
  );

  const now = new Date();
  const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
  const oneHourFromNow = new Date(now.getTime() + 60 * 60 * 1000);
  const twoHoursFromNow = new Date(now.getTime() + 2 * 60 * 60 * 1000);
  const oneHourAgo2 = new Date(now.getTime() - 2 * 60 * 60 * 1000);

  const testCases = [
    {
      name: "√âv√©nement termin√© (fin dans le pass√©)",
      startDate: oneHourAgo2,
      endDate: oneHourAgo,
      expectedStatus: EventStatus.TERMINE,
    },
    {
      name: "√âv√©nement en cours (d√©but pass√©, fin future)",
      startDate: oneHourAgo,
      endDate: oneHourFromNow,
      expectedStatus: EventStatus.EN_COURS,
    },
    {
      name: "√âv√©nement √† venir (d√©but et fin dans le futur)",
      startDate: oneHourFromNow,
      endDate: twoHoursFromNow,
      expectedStatus: EventStatus.A_VENIR,
    },
    {
      name: "√âv√©nement qui commence maintenant (d√©but = maintenant)",
      startDate: now,
      endDate: oneHourFromNow,
      expectedStatus: EventStatus.EN_COURS,
    },
    {
      name: "√âv√©nement qui se termine maintenant (fin = maintenant)",
      startDate: oneHourAgo,
      endDate: now,
      expectedStatus: EventStatus.TERMINE,
    },
  ];

  let passedTests = 0;
  let totalTests = testCases.length;

  testCases.forEach((testCase, index) => {
    console.log(`Test ${index + 1}: ${testCase.name}`);

    const result = calculateEventStatus(testCase.startDate, testCase.endDate);
    const passed = result === testCase.expectedStatus;

    if (passed) {
      console.log(`‚úÖ PASS - Statut calcul√©: ${result}`);
      passedTests++;
    } else {
      console.log(
        `‚ùå FAIL - Attendu: ${testCase.expectedStatus}, Obtenu: ${result}`
      );
    }

    console.log(`   D√©but: ${testCase.startDate.toLocaleString()}`);
    console.log(`   Fin: ${testCase.endDate.toLocaleString()}`);
    console.log(`   Maintenant: ${now.toLocaleString()}`);
    console.log(`   Maintenant (UTC): ${now.toISOString()}`);
    console.log("");
  });

  // R√©sum√© des tests
  console.log("üìä R√©sum√© des tests");
  console.log(`Tests r√©ussis: ${passedTests}/${totalTests}`);

  if (passedTests === totalTests) {
    console.log("üéâ Tous les tests sont pass√©s avec succ√®s !");
  } else {
    console.log("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la logique.");
  }

  return passedTests === totalTests;
}

/**
 * Tests de pr√©cision avec les minutes (UTC)
 */
function testMinutePrecision() {
  console.log("\n‚è∞ Tests de pr√©cision avec les minutes (UTC)\n");

  const now = new Date();
  const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);
  const fiveMinutesFromNow = new Date(now.getTime() + 5 * 60 * 1000);
  const tenMinutesFromNow = new Date(now.getTime() + 10 * 60 * 1000);

  const minuteTestCases = [
    {
      name: "√âv√©nement qui s'est termin√© il y a 5 minutes",
      startDate: fiveMinutesAgo,
      endDate: fiveMinutesAgo,
      expectedStatus: EventStatus.TERMINE,
    },
    {
      name: "√âv√©nement qui commence dans 5 minutes",
      startDate: fiveMinutesFromNow,
      endDate: tenMinutesFromNow,
      expectedStatus: EventStatus.A_VENIR,
    },
    {
      name: "√âv√©nement qui se termine dans 5 minutes",
      startDate: fiveMinutesAgo,
      endDate: fiveMinutesFromNow,
      expectedStatus: EventStatus.EN_COURS,
    },
  ];

  minuteTestCases.forEach((testCase, index) => {
    console.log(`Test minute ${index + 1}: ${testCase.name}`);

    const result = calculateEventStatus(testCase.startDate, testCase.endDate);
    const passed = result === testCase.expectedStatus;

    if (passed) {
      console.log(`‚úÖ PASS - Statut calcul√©: ${result}`);
    } else {
      console.log(
        `‚ùå FAIL - Attendu: ${testCase.expectedStatus}, Obtenu: ${result}`
      );
    }

    console.log(`   D√©but: ${testCase.startDate.toLocaleString()}`);
    console.log(`   Fin: ${testCase.endDate.toLocaleString()}`);
    console.log(`   Maintenant: ${now.toLocaleString()}`);
    console.log(`   Maintenant (UTC): ${now.toISOString()}`);
    console.log("");
  });
}

/**
 * Tests de coh√©rence UTC
 */
function testUTCConsistency() {
  console.log("\nüåç Tests de coh√©rence UTC\n");

  // Cr√©er des dates UTC sp√©cifiques
  const utcNow = new Date();
  const utcStart = new Date(
    Date.UTC(
      utcNow.getUTCFullYear(),
      utcNow.getUTCMonth(),
      utcNow.getUTCDate(),
      utcNow.getUTCHours() - 1,
      0,
      0
    )
  );
  const utcEnd = new Date(
    Date.UTC(
      utcNow.getUTCFullYear(),
      utcNow.getUTCMonth(),
      utcNow.getUTCDate(),
      utcNow.getUTCHours() + 1,
      0,
      0
    )
  );

  console.log("Test de coh√©rence UTC:");
  console.log(`   Heure locale actuelle: ${utcNow.toLocaleString()}`);
  console.log(`   Heure UTC actuelle: ${utcNow.toISOString()}`);
  console.log(`   D√©but √©v√©nement (UTC): ${utcStart.toISOString()}`);
  console.log(`   Fin √©v√©nement (UTC): ${utcEnd.toISOString()}`);

  const result = calculateEventStatus(utcStart, utcEnd);
  console.log(`   Statut calcul√©: ${result}`);
  console.log("");
}

/**
 * Test avec des dates r√©elles
 */
function testRealDates() {
  console.log("\nüîç Tests avec des dates r√©elles\n");

  const realTestCases = [
    {
      name: "√âv√©nement d'hier",
      startDate: "2024-01-01T10:00:00",
      endDate: "2024-01-01T12:00:00",
    },
    {
      name: "√âv√©nement de demain",
      startDate: "2025-01-01T10:00:00",
      endDate: "2025-01-01T12:00:00",
    },
    {
      name: "√âv√©nement en cours (d√©but hier, fin demain)",
      startDate: "2024-12-31T10:00:00",
      endDate: "2025-01-02T12:00:00",
    },
  ];

  realTestCases.forEach((testCase, index) => {
    console.log(`Test r√©el ${index + 1}: ${testCase.name}`);
    const result = calculateEventStatus(testCase.startDate, testCase.endDate);
    console.log(`   Statut calcul√©: ${result}`);
    console.log(`   D√©but: ${testCase.startDate}`);
    console.log(`   Fin: ${testCase.endDate}`);
    console.log("");
  });
}

// Ex√©cution des tests
if (require.main === module) {
  const success = runTests();
  testMinutePrecision();
  testUTCConsistency();
  testRealDates();

  // Code de sortie appropri√©
  process.exit(success ? 0 : 1);
}

module.exports = {
  calculateEventStatus,
  EventStatus,
};
