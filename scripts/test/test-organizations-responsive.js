/**
 * Script de test pour v√©rifier la responsivit√© de la section des organisations
 * et l'affichage des images de profil
 */

const BASE_URL = "http://localhost:3000";

async function testOrganizationsResponsive() {
  console.log(
    "üß™ Test de la responsivit√© de la section des organisations...\n"
  );

  try {
    // Test 1: V√©rifier que l'API est accessible
    console.log("1Ô∏è‚É£ Test d'accessibilit√© de l'API...");
    const response = await fetch(`${BASE_URL}/api/user/organizations`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
      credentials: "include",
    });

    if (!response.ok) {
      if (response.status === 401) {
        console.log("‚ùå API accessible mais authentification requise");
        console.log("üí° Connectez-vous d'abord √† l'application");
        return;
      }
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    console.log("‚úÖ API accessible");

    // Test 2: V√©rifier la structure de la r√©ponse
    console.log("\n2Ô∏è‚É£ Test de la structure de la r√©ponse...");
    const data = await response.json();

    if (!data.organizations) {
      throw new Error('La r√©ponse ne contient pas le champ "organizations"');
    }

    console.log(
      `‚úÖ R√©ponse valide avec ${data.organizations.length} organisation(s)`
    );

    // Test 3: V√©rifier que chaque organisation a les champs requis
    console.log("\n3Ô∏è‚É£ Test des champs requis...");
    const organizations = data.organizations;

    if (organizations.length === 0) {
      console.log("‚ÑπÔ∏è  Aucune organisation trouv√©e pour cet utilisateur");
      return;
    }

    const requiredFields = [
      "id",
      "name",
      "role",
      "memberCount",
      "profileImage",
    ];
    let allHaveRequiredFields = true;

    organizations.forEach((org, index) => {
      const missingFields = requiredFields.filter((field) => !(field in org));
      if (missingFields.length > 0) {
        console.log(
          `‚ùå Organisation "${org.name}" (ID: ${
            org.id
          }) manque: ${missingFields.join(", ")}`
        );
        allHaveRequiredFields = false;
      } else {
        console.log(
          `‚úÖ Organisation "${org.name}": tous les champs requis pr√©sents`
        );
      }
    });

    if (allHaveRequiredFields) {
      console.log("\nüéâ Toutes les organisations ont tous les champs requis !");
    } else {
      console.log("\n‚ùå Certaines organisations manquent des champs requis");
    }

    // Test 4: V√©rifier les images de profil
    console.log("\n4Ô∏è‚É£ Test des images de profil...");
    const orgsWithImages = organizations.filter((org) => org.profileImage);
    const orgsWithoutImages = organizations.filter((org) => !org.profileImage);

    console.log(`üì∏ Organisations avec image: ${orgsWithImages.length}`);
    orgsWithImages.forEach((org) => {
      console.log(`   - "${org.name}": ${org.profileImage}`);
    });

    console.log(`üñºÔ∏è  Organisations sans image: ${orgsWithoutImages.length}`);
    orgsWithoutImages.forEach((org) => {
      console.log(`   - "${org.name}": pas d'image`);
    });

    // Test 5: V√©rifier les r√¥les
    console.log("\n5Ô∏è‚É£ Test des r√¥les...");
    const validRoles = ["OWNER", "ADMIN", "MEMBER"];
    const roleCounts = {};

    organizations.forEach((org) => {
      roleCounts[org.role] = (roleCounts[org.role] || 0) + 1;
    });

    Object.entries(roleCounts).forEach(([role, count]) => {
      console.log(`   - ${role}: ${count} organisation(s)`);
    });

    // Test 6: Afficher un r√©sum√© d√©taill√©
    console.log("\nüìä R√©sum√© d√©taill√© des organisations:");
    organizations.forEach((org, index) => {
      const hasImage = org.profileImage ? "‚úÖ" : "‚ùå";
      const memberText = org.memberCount === 1 ? "membre" : "membres";

      console.log(`   ${index + 1}. ${org.name}`);
      console.log(`      R√¥le: ${org.role}`);
      console.log(`      Membres: ${org.memberCount} ${memberText}`);
      console.log(
        `      Image: ${hasImage} ${org.profileImage || "Aucune image"}`
      );
      console.log("");
    });

    // Test 7: V√©rifier la responsivit√© des donn√©es
    console.log("\n7Ô∏è‚É£ Test de la responsivit√© des donn√©es...");
    console.log("üí° Pour tester la responsivit√© visuelle:");
    console.log("   1. Allez sur la page de profil");
    console.log('   2. Ouvrez la section "Organisations"');
    console.log("   3. Redimensionnez la fen√™tre du navigateur");
    console.log("   4. V√©rifiez que la grille s'adapte:");
    console.log("      - Mobile (1 colonne)");
    console.log("      - Tablette (2 colonnes)");
    console.log("      - Desktop (3 colonnes)");
    console.log("      - Large (4 colonnes)");
  } catch (error) {
    console.error("\nüí• Erreur lors du test:", error.message);

    if (error.message.includes("fetch")) {
      console.log("\nüí° V√©rifiez que:");
      console.log(
        "   - L'application Next.js est d√©marr√©e sur http://localhost:3000"
      );
      console.log("   - Vous √™tes connect√© √† l'application");
      console.log("   - L'API est accessible");
    }
  }
}

// Ex√©cution du test
if (require.main === module) {
  testOrganizationsResponsive();
}

module.exports = { testOrganizationsResponsive };
