const { PrismaClient } = require("@prisma/client");
const { randomBytes } = require("crypto");

const prisma = new PrismaClient();

/**
 * @param G√©n√©ration d'un CUID simple
 *
 * Cr√©e un identifiant unique de 20 caract√®res
 */
function generateCUID() {
  return randomBytes(10).toString("hex");
}

/**
 * @param Mise √† jour des invitations existantes
 *
 * Ajoute des invitationId aux invitations existantes
 */
async function updateExistingInvitations() {
  try {
    console.log("üîç Recherche des invitations sans invitationId...");

    // R√©cup√©rer toutes les invitations sans invitationId
    const invitations = await prisma.invitation.findMany({
      where: {
        invitationId: null,
      },
    });

    console.log(`üìß Trouv√© ${invitations.length} invitations √† mettre √† jour`);

    if (invitations.length === 0) {
      console.log("‚úÖ Aucune invitation √† mettre √† jour");
      return;
    }

    // Mettre √† jour chaque invitation avec un invitationId
    for (const invitation of invitations) {
      const invitationId = generateCUID();

      await prisma.invitation.update({
        where: { id: invitation.id },
        data: { invitationId },
      });

      console.log(
        `‚úÖ Invitation ${invitation.id} mise √† jour avec invitationId: ${invitationId}`
      );
    }

    console.log("üéâ Toutes les invitations ont √©t√© mises √† jour avec succ√®s !");
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour des invitations:", error);
    throw error;
  }
}

/**
 * @param Fonction principale
 *
 * Ex√©cute la mise √† jour des invitations
 */
async function main() {
  try {
    await updateExistingInvitations();
  } catch (error) {
    console.error("‚ùå Erreur dans le script:", error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main();
