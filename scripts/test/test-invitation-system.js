const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

/**
 * @param Test du syst√®me d'invitations
 *
 * V√©rifie que le syst√®me d'invitations fonctionne correctement
 */
async function testInvitationSystem() {
  try {
    console.log("üß™ Test du syst√®me d'invitations...\n");

    // 1. V√©rifier qu'il y a des √©v√©nements
    console.log("1Ô∏è‚É£ V√©rification des √©v√©nements...");
    const events = await prisma.event.findMany({
      take: 1,
      include: {
        organization: true,
      },
    });

    if (events.length === 0) {
      console.log("‚ùå Aucun √©v√©nement trouv√©. Cr√©ez d'abord un √©v√©nement.");
      return;
    }

    const event = events[0];
    console.log(`‚úÖ √âv√©nement trouv√©: ${event.title} (${event.eventCode})`);

    // 2. Cr√©er une invitation de test
    console.log("\n2Ô∏è‚É£ Cr√©ation d'une invitation de test...");
    const testInvitation = await prisma.invitation.create({
      data: {
        eventCode: event.eventCode,
        receiverName: "Test User",
        receiverEmail: "test@example.com",
        status: "PENDING",
        sentAt: new Date(),
      },
    });

    console.log(`‚úÖ Invitation cr√©√©e avec ID: ${testInvitation.id}`);
    // 3. G√©n√©rer le code d'invitation
    console.log("\n3Ô∏è‚É£ G√©n√©ration du code d'invitation...");
    const invitationCode = `${testInvitation.invitationId}+${event.eventCode}`;
    console.log(`‚úÖ Code d'invitation: ${invitationCode}`);

    // 4. Tester la validation du code
    console.log("\n4Ô∏è‚É£ Test de validation du code...");
    const decodedCode = decodeInvitationCode(invitationCode);

    if (decodedCode) {
      console.log(
        `‚úÖ Code d√©cod√©: invitationId=${decodedCode.invitationId}, eventCode=${decodedCode.eventCode}`
      );
    } else {
      console.log("‚ùå Erreur lors du d√©codage du code");
      console.log(`üîç Code √† d√©coder: ${invitationCode}`);
      console.log(`üîç Parts apr√®s split: ${invitationCode.split("+")}`);
      return;
    }

    // 5. V√©rifier que l'invitation existe
    console.log("\n5Ô∏è‚É£ V√©rification de l'existence de l'invitation...");
    const foundInvitation = await prisma.invitation.findFirst({
      where: {
        invitationId: decodedCode.invitationId,
        eventCode: decodedCode.eventCode,
      },
      include: {
        event: {
          include: {
            organization: true,
          },
        },
      },
    });

    if (foundInvitation) {
      console.log(
        `‚úÖ Invitation trouv√©e: ${foundInvitation.receiverName} (${foundInvitation.receiverEmail})`
      );
      console.log(`‚úÖ √âv√©nement: ${foundInvitation.event.title}`);
      console.log(
        `‚úÖ Organisation: ${foundInvitation.event.organization.name}`
      );
    } else {
      console.log("‚ùå Invitation non trouv√©e");
      console.log(
        `üîç Recherche avec: invitationId=${decodedCode.invitationId}, eventCode=${decodedCode.eventCode}`
      );

      // V√©rifier si l'invitation existe avec l'ID
      const invitationById = await prisma.invitation.findUnique({
        where: { id: testInvitation.id },
        include: {
          event: true,
        },
      });

      if (invitationById) {
        console.log(`üîç Invitation trouv√©e par ID: ${invitationById.id}`);
        console.log(`üîç invitationId dans DB: ${invitationById.invitationId}`);
        console.log(`üîç eventCode dans DB: ${invitationById.eventCode}`);
      }
      return;
    }

    // 6. Tester la mise √† jour du statut
    console.log("\n6Ô∏è‚É£ Test de mise √† jour du statut...");
    const updatedInvitation = await prisma.invitation.update({
      where: { id: testInvitation.id },
      data: {
        status: "ACCEPTED",
        respondedAt: new Date(),
      },
    });

    console.log(`‚úÖ Statut mis √† jour: ${updatedInvitation.status}`);

    // 7. Nettoyer les donn√©es de test
    console.log("\n7Ô∏è‚É£ Nettoyage des donn√©es de test...");
    await prisma.invitation.delete({
      where: { id: testInvitation.id },
    });

    console.log("‚úÖ Donn√©es de test supprim√©es");

    console.log("\nüéâ Tous les tests sont pass√©s avec succ√®s !");
    console.log("\nüìã R√©sum√©:");
    console.log("- ‚úÖ Cr√©ation d'invitation");
    console.log("- ‚úÖ G√©n√©ration de code d'invitation");
    console.log("- ‚úÖ D√©codage de code d'invitation");
    console.log("- ‚úÖ Validation d'invitation");
    console.log("- ‚úÖ Mise √† jour de statut");
    console.log(
      "- ‚úÖ Format de lien: /join-event?code={invitationId}+{eventCode}"
    );
  } catch (error) {
    console.error("‚ùå Erreur lors des tests:", error);
    throw error;
  }
}

/**
 * @param D√©codage d'un code d'invitation
 *
 * Extrait l'invitationId (CUID) et le code d'√©v√©nement du code combin√©
 */
function decodeInvitationCode(code) {
  const parts = code.split("+");
  if (parts.length !== 2) {
    return null;
  }

  const invitationId = parts[0];
  const eventCode = parts[1];

  if (!invitationId || !eventCode) {
    return null;
  }

  return { invitationId, eventCode };
}

/**
 * @param Fonction principale
 *
 * Ex√©cute les tests du syst√®me d'invitations
 */
async function main() {
  try {
    await testInvitationSystem();
  } catch (error) {
    console.error("‚ùå Erreur dans les tests:", error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main();
