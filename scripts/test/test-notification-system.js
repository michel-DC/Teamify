/**
 * Script de test pour le syst√®me de notifications
 * Teste la cr√©ation, r√©cup√©ration et gestion des notifications
 */

const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

async function testNotificationSystem() {
  console.log("üß™ Test du syst√®me de notifications...\n");

  try {
    // 1. R√©cup√©rer un utilisateur existant
    const user = await prisma.user.findFirst();

    if (!user) {
      console.log("‚ùå Aucun utilisateur trouv√© pour les tests");
      return;
    }

    console.log(`‚úÖ Utilisateur de test: ${user.email} (${user.uid})`);

    // 2. R√©cup√©rer une organisation existante
    const organization = await prisma.organization.findFirst({
      where: {
        ownerUid: user.uid,
      },
    });

    if (!organization) {
      console.log("‚ùå Aucune organisation trouv√©e pour les tests");
      return;
    }

    console.log(
      `‚úÖ Organisation de test: ${organization.name} (${organization.publicId})`
    );

    // 3. R√©cup√©rer un √©v√©nement existant
    const event = await prisma.event.findFirst({
      where: {
        orgId: organization.id,
      },
    });

    if (!event) {
      console.log("‚ùå Aucun √©v√©nement trouv√© pour les tests");
      return;
    }

    console.log(`‚úÖ √âv√©nement de test: ${event.title} (${event.publicId})`);

    // 4. Cr√©er une notification de test
    console.log("\nüìù Cr√©ation d'une notification de test...");

    const testNotification = await prisma.notification.create({
      data: {
        notificationName: "Test de notification",
        notificationDescription:
          "Ceci est une notification de test cr√©√©e par le script.",
        notificationType: "INFO",
        userUid: user.uid,
        eventPublicId: event.publicId,
        organizationPublicId: organization.publicId,
      },
    });

    console.log(`‚úÖ Notification cr√©√©e: ${testNotification.publicId}`);

    // 5. R√©cup√©rer les notifications de l'utilisateur
    console.log("\nüìã R√©cup√©ration des notifications...");

    const userNotifications = await prisma.notification.findMany({
      where: {
        userUid: user.uid,
      },
      include: {
        event: {
          select: {
            title: true,
            publicId: true,
          },
        },
        organization: {
          select: {
            name: true,
            publicId: true,
          },
        },
      },
      orderBy: {
        createdAt: "desc",
      },
      take: 5,
    });

    console.log(`‚úÖ ${userNotifications.length} notifications trouv√©es:`);
    userNotifications.forEach((notification, index) => {
      console.log(
        `   ${index + 1}. ${notification.notificationName} (${
          notification.notificationType
        })`
      );
      console.log(`      ${notification.notificationDescription}`);
      if (notification.event) {
        console.log(`      √âv√©nement: ${notification.event.title}`);
      }
      if (notification.organization) {
        console.log(`      Organisation: ${notification.organization.name}`);
      }
      console.log(`      Lu: ${notification.isRead ? "Oui" : "Non"}`);
      console.log(
        `      Date: ${notification.notificationDate.toLocaleString()}`
      );
      console.log("");
    });

    // 6. Compter les notifications non lues
    console.log("üìä Statistiques des notifications...");

    const unreadCount = await prisma.notification.count({
      where: {
        userUid: user.uid,
        isRead: false,
      },
    });

    const totalCount = await prisma.notification.count({
      where: {
        userUid: user.uid,
      },
    });

    console.log(`‚úÖ Total: ${totalCount} notifications`);
    console.log(`‚úÖ Non lues: ${unreadCount} notifications`);

    // 7. Marquer la notification de test comme lue
    console.log("\n‚úÖ Marquage de la notification de test comme lue...");

    await prisma.notification.update({
      where: {
        publicId: testNotification.publicId,
      },
      data: {
        isRead: true,
      },
    });

    console.log("‚úÖ Notification marqu√©e comme lue");

    // 8. V√©rifier le nouveau compteur
    const newUnreadCount = await prisma.notification.count({
      where: {
        userUid: user.uid,
        isRead: false,
      },
    });

    console.log(`‚úÖ Nouvelles notifications non lues: ${newUnreadCount}`);

    // 9. Nettoyer - supprimer la notification de test
    console.log("\nüßπ Nettoyage - suppression de la notification de test...");

    await prisma.notification.delete({
      where: {
        publicId: testNotification.publicId,
      },
    });

    console.log("‚úÖ Notification de test supprim√©e");

    console.log("\nüéâ Test du syst√®me de notifications termin√© avec succ√®s !");
  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le test
testNotificationSystem();
