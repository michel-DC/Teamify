/**
 * Script pour tester l'authentification JWT avec Socket.IO
 */

import { io } from "socket.io-client";
import fetch from "node-fetch";

console.log("üîê Test d'authentification JWT avec Socket.IO...");

/**
 * Obtenir un token JWT r√©el depuis l'API
 */
async function getRealJWTToken() {
  console.log("üç™ Tentative d'obtention d'un token JWT r√©el...");

  try {
    // Simuler une requ√™te avec des cookies
    const response = await fetch("http://localhost:3000/api/auth/me", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    console.log(`Status API: ${response.status}`);

    if (response.ok) {
      const data = await response.json();
      console.log("‚úÖ Utilisateur authentifi√©:", data.user?.email);

      // Dans un vrai navigateur, le token serait dans les cookies
      // Pour ce test, on va utiliser le token de d√©mo
      return "demo_token";
    } else {
      console.log("‚ùå Non authentifi√© via API");
      return null;
    }
  } catch (error) {
    console.log("‚ùå Erreur API:", error.message);
    return null;
  }
}

/**
 * Test de connexion Socket.IO avec authentification
 */
async function testSocketAuth() {
  console.log("\nüîå Test de connexion Socket.IO...");

  const token = await getRealJWTToken();
  if (!token) {
    console.log("‚ùå Impossible d'obtenir un token");
    return false;
  }

  return new Promise((resolve) => {
    const socket = io("http://localhost:3001", {
      auth: { token },
      transports: ["websocket", "polling"],
      autoConnect: true,
      reconnection: false,
    });

    const timeout = setTimeout(() => {
      console.log("‚ùå Timeout de connexion Socket.IO");
      socket.disconnect();
      resolve(false);
    }, 10000);

    socket.on("connect", () => {
      console.log("‚úÖ Socket.IO connect√© avec succ√®s !");
      console.log("üîó ID de connexion:", socket.id);

      // Test d'envoi de message
      setTimeout(() => {
        console.log("üì§ Test d'envoi de message...");
        socket.emit("message:send", {
          conversationId: "test-conversation",
          content: "Message de test avec authentification JWT",
        });

        setTimeout(() => {
          console.log("‚úÖ Test d'envoi termin√©");
          socket.disconnect();
          resolve(true);
        }, 2000);
      }, 1000);
    });

    socket.on("connect_error", (error) => {
      console.log("‚ùå Erreur de connexion Socket.IO:", error.message);
      clearTimeout(timeout);
      resolve(false);
    });

    socket.on("error", (error) => {
      console.log("‚ùå Erreur Socket.IO:", error);
    });

    socket.on("message:new", (data) => {
      console.log("üì® Message re√ßu:", data);
    });
  });
}

/**
 * Ex√©cuter le test
 */
async function runTest() {
  console.log("üöÄ D√©marrage du test d'authentification JWT...");
  console.log("üì° URL Socket.IO: http://localhost:3001");
  console.log("üì° URL Next.js: http://localhost:3000");

  const success = await testSocketAuth();

  if (success) {
    console.log("\nüéâ Test r√©ussi !");
    console.log("‚úÖ L'authentification JWT fonctionne avec Socket.IO");
    console.log("üí° L'envoi de messages devrait maintenant fonctionner");
  } else {
    console.log("\n‚ö†Ô∏è  Test √©chou√©");
    console.log("üîß Solutions possibles:");
    console.log("   1. Lancez le serveur: pnpm run dev:full");
    console.log(
      "   2. V√©rifiez que l'utilisateur est connect√© dans le navigateur"
    );
    console.log("   3. V√©rifiez les logs du serveur Socket.IO");
  }

  return success;
}

// Ex√©cuter le test
runTest()
  .then((success) => {
    process.exit(success ? 0 : 1);
  })
  .catch((error) => {
    console.error("‚ùå Erreur lors de l'ex√©cution du test:", error);
    process.exit(1);
  });
