const { S3Client, PutObjectCommand } = require("@aws-sdk/client-s3");
require("dotenv").config();

/**
 * @param Script de test pour v√©rifier l'affichage des images
 */
async function testImageDisplay() {
  console.log("üñºÔ∏è  Test de l'affichage des images...\n");

  // V√©rification des variables d'environnement
  if (
    !process.env.R2_ACCESS_KEY_ID ||
    !process.env.R2_SECRET_ACCESS_KEY ||
    !process.env.R2_ENDPOINT ||
    !process.env.R2_BUCKET
  ) {
    console.error("‚ùå Variables d'environnement R2 manquantes");
    process.exit(1);
  }

  // Configuration du client S3
  const s3Client = new S3Client({
    region: "auto",
    endpoint: process.env.R2_ENDPOINT,
    credentials: {
      accessKeyId: process.env.R2_ACCESS_KEY_ID,
      secretAccessKey: process.env.R2_SECRET_ACCESS_KEY,
    },
    forcePathStyle: true,
  });

  const bucketName = process.env.R2_BUCKET;
  const testFileName = `test-image-${Date.now()}.txt`;
  const testContent = "Test image content";

  try {
    // Test 1: Upload d'un fichier
    console.log("üì§ Test 1: Upload d'un fichier...");
    const uploadCommand = new PutObjectCommand({
      Bucket: bucketName,
      Key: testFileName,
      Body: testContent,
      ContentType: "text/plain",
    });

    await s3Client.send(uploadCommand);
    console.log(`‚úÖ Fichier upload√©: ${testFileName}\n`);

    // Test 2: Test de l'API de g√©n√©ration d'URL sign√©e
    console.log("üîê Test 2: Test de l'API de g√©n√©ration d'URL sign√©e...");

    const imageUrl = `https://24209da4d5dada18fc8dc25e19f8d004.r2.cloudflarestorage.com/${bucketName}/${testFileName}`;

    const response = await fetch(
      "http://localhost:3000/api/images/signed-url",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ imageUrl }),
      }
    );

    if (response.ok) {
      const data = await response.json();
      console.log("‚úÖ API fonctionne correctement");
      console.log(
        `   URL sign√©e g√©n√©r√©e: ${data.signedUrl.substring(0, 100)}...`
      );
      console.log(`   Expires in: ${data.expiresIn} secondes`);
    } else {
      console.log(`‚ùå Erreur API: ${response.status} ${response.statusText}`);
    }

    console.log("\nüéâ Tests termin√©s !");
    console.log("\nüìù Pour tester l'affichage des images :");
    console.log("   1. D√©marrez votre serveur de d√©veloppement");
    console.log("   2. Allez sur le dashboard des √©v√©nements");
    console.log("   3. V√©rifiez que les images s'affichent correctement");
  } catch (error) {
    console.error("‚ùå Erreur lors des tests:", error);
  } finally {
    // Nettoyage
    try {
      console.log("\nüßπ Nettoyage...");
      const deleteCommand = new PutObjectCommand({
        Bucket: bucketName,
        Key: testFileName,
        Body: "",
      });
      await s3Client.send(deleteCommand);
      console.log("‚úÖ Fichier de test supprim√©");
    } catch (cleanupError) {
      console.warn("‚ö†Ô∏è  Erreur lors du nettoyage:", cleanupError.message);
    }
  }
}

// Ex√©cution du test
testImageDisplay().catch(console.error);
