/**
 * Script de test pour l'API des notifications
 * Teste les endpoints de l'API des notifications
 */

const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

async function testNotificationAPI() {
  console.log("üß™ Test de l'API des notifications...\n");

  try {
    // 1. R√©cup√©rer un utilisateur existant
    const user = await prisma.user.findFirst();

    if (!user) {
      console.log("‚ùå Aucun utilisateur trouv√© pour les tests");
      return;
    }

    console.log(`‚úÖ Utilisateur de test: ${user.email} (${user.uid})`);

    // 2. Cr√©er un token de test (simulation)
    // Dans un vrai test, nous utiliserions un vrai token JWT
    console.log("\nüîë Simulation d'un token d'authentification...");
    console.log(
      "Note: Dans un vrai test, nous utiliserions un token JWT valide"
    );

    // 3. Cr√©er une notification de test
    console.log("\nüìù Cr√©ation d'une notification de test...");

    const testNotification = await prisma.notification.create({
      data: {
        notificationName: "Test API Notification",
        notificationDescription:
          "Ceci est une notification de test pour l'API.",
        notificationType: "INFO",
        userUid: user.uid,
      },
    });

    console.log(`‚úÖ Notification cr√©√©e: ${testNotification.publicId}`);

    // 4. Tester les requ√™tes Prisma directement
    console.log("\nüîß Test des requ√™tes Prisma pour les notifications...");

    // Test getUserNotifications (simulation)
    const notifications = await prisma.notification.findMany({
      where: {
        userUid: user.uid,
      },
      include: {
        event: {
          select: {
            title: true,
            publicId: true,
          },
        },
        organization: {
          select: {
            name: true,
            publicId: true,
          },
        },
      },
      orderBy: {
        notificationDate: "desc",
      },
      take: 10,
    });
    console.log(
      `‚úÖ getUserNotifications: ${notifications.length} notifications r√©cup√©r√©es`
    );

    // Test getUnreadNotificationCount (simulation)
    const unreadCount = await prisma.notification.count({
      where: {
        userUid: user.uid,
        isRead: false,
      },
    });
    console.log(
      `‚úÖ getUnreadNotificationCount: ${unreadCount} notifications non lues`
    );

    // 5. Afficher les d√©tails des notifications
    console.log("\nüìã D√©tails des notifications:");
    notifications.forEach((notification, index) => {
      console.log(
        `   ${index + 1}. ${notification.notificationName} (${
          notification.notificationType
        })`
      );
      console.log(`      ${notification.notificationDescription}`);
      console.log(`      Lu: ${notification.isRead ? "Oui" : "Non"}`);
      console.log(
        `      Date: ${notification.notificationDate.toLocaleString()}`
      );
      console.log("");
    });

    // 6. Nettoyer - supprimer la notification de test
    console.log("üßπ Nettoyage - suppression de la notification de test...");

    await prisma.notification.delete({
      where: {
        publicId: testNotification.publicId,
      },
    });

    console.log("‚úÖ Notification de test supprim√©e");

    console.log("\nüéâ Test de l'API des notifications termin√© avec succ√®s !");
    console.log("\nüìù Note: Pour tester les endpoints HTTP, vous devez:");
    console.log("   1. D√©marrer le serveur Next.js (npm run dev)");
    console.log("   2. Vous connecter pour obtenir un token JWT valide");
    console.log(
      "   3. Utiliser un client HTTP (Postman, curl, etc.) avec le token"
    );
  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le test
testNotificationAPI();
